---
import '@/styles/app.scss';
---

<section class="contact">
  <form class="contact__form" id="contact-form">
    <div class="contact__form-group">
      <label for="username" class="contact__label">Nombre</label>
      <input
        id="username"
        type="text"
        name="username"
        placeholder="Tu nombre..."
        class="contact__input"
      />
      <p class="contact__message contact__message--error"></p>
    </div>
  
    <div class="contact__form-group">
      <label for="email" class="contact__label">Correo Electrónico</label>
      <input
        id="email"
        type="email"
        name="email"
        placeholder="Ejemplo@gmail.com"
        class="contact__input"
      />
      <p class="contact__message contact__message--error"></p>
    </div>
  
    <div class="contact__form-group">
      <label for="message" class="contact__label">Mensaje</label>
      <textarea
        id="message"
        name="message"
        placeholder="Escribe tu mensaje aquí"
        class="contact__textarea"
      ></textarea>
    </div>

    <div class="contact__honeypot">
      <label for="honeypot">No llenar este campo</label>
      <input type="text" id="honeypot" name="honeypot">
    </div>
  
    <div class="contact__form-group">
      <button type="button" id="submit" class="contact__from-buttom contact__button--submit">Enviar</button>
    </div>
  </form>      
</section>

<script is="global">
document.addEventListener("DOMContentLoaded", () => {
  const form = document.querySelector("#contact-form");
  const userNameField = document.querySelector("#username");
  const emailField = document.querySelector("#email");
  const messageField = document.querySelector("#message");
  const honeypot = document.querySelector("#honeypot");
  const submitButton = document.querySelector("#submit");

  const showToast = (message, type = "success") => {
    Toastify({
      text: message,
      duration: 3000,
      gravity: "top",
      position: "right",
      backgroundColor: type === "success" ? "#4caf50" : "#f44336",
    }).showToast();
  };

  const setErrors = (message, field, isError = true) => {
    const messageElement = field.nextElementSibling;

    if (field.value.trim() === "") {
      field.classList.remove("contact__input--error", "contact__input--success");
      messageElement.classList.remove("contact__message--error", "contact__message--success");
      messageElement.innerText = "";
    } else if (isError) {
      field.classList.add("contact__input--error");
      field.classList.remove("contact__input--success");
      messageElement.classList.add("contact__message--error");
      messageElement.classList.remove("contact__message--success");
      messageElement.innerText = message;
    } else {
      field.classList.remove("contact__input--error");
      field.classList.add("contact__input--success");
      messageElement.classList.remove("contact__message--error");
      messageElement.classList.add("contact__message--success");
      messageElement.innerText = "¡Correcto!";
    }
  };

  const validateEmptyField = (message, field) => {
    const fieldValue = field.value.trim();
    if (fieldValue.length === 0) {
      setErrors(message, field, true);
      return false;
    } else {
      setErrors("", field, false);
      return true;
    }
  }; 

  const validateEmailFormat = (field) => {
    const fieldValue = field.value.trim();
    const regex = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/;

    if (fieldValue.length > 5 && !regex.test(fieldValue)) {
      setErrors("Por favor, ingresa un correo electrónico válido.", field, true);
      return false;
    } else {
      setErrors("", field, false);
      return true;
    }
  };

  userNameField.addEventListener("input", () => validateEmptyField("Por favor, ingresa tu nombre.", userNameField));
  emailField.addEventListener("input", () => validateEmailFormat(emailField));
  emailField.addEventListener("blur", () => validateEmptyField("Por favor, ingresa un correo válido.", emailField));

  form.addEventListener("submit", async (event) => {
    event.preventDefault();

    if (
      honeypot.value ||
      !validateEmptyField("Por favor, ingresa tu nombre.", userNameField) ||
      !validateEmptyField("Por favor, ingresa un mensaje.", messageField) ||
      !validateEmailFormat(emailField)
    ) {
      showToast("Por favor, completa todos los campos correctamente.", "error");
      return;
    }

    const formData = {
      name: userNameField.value.trim(),
      email: emailField.value.trim(),
      message: messageField.value.trim(),
    };

    try {
      submitButton.disabled = true;
      submitButton.innerText = "Enviando...";

      const response = await fetch("/api/contact", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      if (!response.ok) throw new Error("Error al enviar el mensaje");

      showToast("Tu Mensaje Fue Enviado ✅", "success");
      form.reset();
    } catch (error) {
      showToast("Hubo un problema al enviar el mensaje ❌", "error");
    } finally {
      submitButton.disabled = false;
      submitButton.innerText = "Enviar";
    }
  });
});
</script>